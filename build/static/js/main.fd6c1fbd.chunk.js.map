{"version":3,"sources":["icons/arrow_forward_ios-white-18dp-2.svg","icons/arrow_back_ios-white-18dp-2.svg","icons/double_arrow_forward_ios-white-18dp.svg","icons/double_arrow_back_ios-white-18dp.svg","components/DatePicker.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DatePicker","props","useState","displayCalendar","setDisplayCalendar","days","setDays","formatDate","date","day","getDate","month","getMonth","year","getFullYear","toggleCalendar","selectDateFromCalendar","e","Date","target","getAttribute","onChange","useEffect","currentDate","numberOfDays","updatedDays","i","j","getDay","push","length","getDays","className","onClick","newDate","setDate","src","leftArrow","alt","type","aria-label","value","placeholder","rightArrow","setMonth","map","console","log","key","toUpperCase","selectedDay","data","Form","inputDate","now","startDate","setStartDate","endDate","setEndDate","displayModal","setDisplayModal","displayDateErrorModal","setDisplayDateErrorModal","name","setName","email","setEmail","toggleDateErorModal","toggleModal","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fd6c1fbd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow_forward_ios-white-18dp-2.2f97d706.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow_back_ios-white-18dp-2.ac543f0d.svg\";","module.exports = __webpack_public_path__ + \"static/media/double_arrow_forward_ios-white-18dp.d023c646.svg\";","module.exports = __webpack_public_path__ + \"static/media/double_arrow_back_ios-white-18dp.1f4f4a42.svg\";","/**\n * @name DatePicker\n * @author Mark Heard\n * @version 2.0\n * @copyright 2020 - 2021\n * @requires ReactJS - A library maintained by Facebook -- https://reactjs.org/\n * @component A component used to select dates.\n * \n * @param {object} props - Properties and methods that are inherited from the parent component.\n * \n * @property {string} props.date -  Date information inherited from a higher level component.\n * \n * @method props.onChange -  A method that updates the date variable in the parent when it is changed by the DatePicker\n * \n * @returns {<DatePicker date={} onChange={}/ >}  - the JSX datepicker element to be rendered\n */\n\n//Import react library with useEffect and useState hooks.\nimport React, { useEffect, useState } from 'react';\n\n//Import some image files to use for icons.\nimport rightArrow from '../icons/arrow_forward_ios-white-18dp-2.svg';\nimport leftArrow from '../icons/arrow_back_ios-white-18dp-2.svg';\nimport rightDblArrow from '../icons/double_arrow_forward_ios-white-18dp.svg';\nimport leftDblArrow from '../icons/double_arrow_back_ios-white-18dp.svg';\n\n\nconst DatePicker = props => {\n\n    /**\n     * @constant displayCalendar records the state of the calendar's display status\n     * @type {boolean} \n     * @default false\n     */\n\n    /**\n     * @method setDisplayCalendar\n     * @returns the state change handler for the displayCalendar state variable\n     */\n\n    const [displayCalendar, setDisplayCalendar] = useState(false);\n\n    /**\n     * @constant days array of date objects to be rendered to the calendar element\n     * @type {date}\n     * @default date[]\n     */\n\n    /**\n     * @method setDays\n     * @returns state change handling function for the days state variable\n     */\n\n    const [days, setDays] = useState([]);\n\n    /**\n     * @method dayNames a method that returns an array of day names\n     * @returns {string[]} array containing the names of each day for matted as a string\n     * @example monthNames()[new Date().getMonth()] will return the current month\n     */\n\n    const dayNames = () => {\n        return (\n            [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\",\n                \"Saturday\"\n            ]\n        );\n    }\n\n    /**\n     * @method monthNames a method that returns an array of month names\n     * @returns {string[]} array containing the names of each month for matted as a string\n     * @example monthNames()[new Date().getMonth()] will return the current month\n     */\n\n    const monthNames = () => {\n        return (\n            [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n                \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n            ]\n        );\n    }\n\n\n\n\n    /**\n     * @method formatDate method used to centralize date formatting\n     * @returns {string} date formatted as a string\n     */\n\n    const formatDate = date => {\n\n        //get the date of the month of the provided date\n        const day = date.getDate();\n        //get the month of the provided date\n        //since months are start their index at zero 1 is added\n        // to make it align with the more common month numbering system starting at 1\n        const month = date.getMonth() + 1;\n        //get the year the provided date\n        const year = date.getFullYear();\n\n        //return the date formatted as a sting\n        return `${year}/${month}/${day}`;\n    };\n\n    /**\n     * @method stepDateForward1Day steps props.date forward by one day\n     * @returns props.onChange method with the new date formatted as a string\n     */\n\n    const stepDateForward1Day = () => {\n\n        //create a new date reference from parent component's state\n        const date = new Date(props.date);\n        //create a date reference for the new date\n        const newDate = new Date(date.setDate(date.getDate() + 1));\n        //update the parent component's state with the new date formatted as a string using the props.onChange method\n        return props.onChange(formatDate(newDate));\n\n    }\n\n    /**\n     * @method stepDateBackward1Day steps props.date backward by one day\n     * @returns the props.onChange method with the new date formatted as a string\n     */\n\n    const stepDateBackward1Day = () => {\n\n        //create a new date reference from parent component's state\n        const date = new Date(props.date);\n        //create a date reference for the new date\n        const newDate = new Date(date.setDate(date.getDate() - 1));\n        //update the parent component's state with the new date formatted as a string using the props.onChange method\n        return props.onChange(formatDate(newDate));\n\n    }\n\n    /**\n     * @method stepDateForward1Month steps props.date forward by one month\n     * @returns the props.onChange method with the new date formatted as a string\n     */\n\n    const stepDateForward1Month = () => {\n\n        //create a new date reference from parent component's state\n        const date = new Date(props.date);\n        //create a date reference for the new date\n        const newDate = new Date(date.setMonth(date.getMonth() + 1));\n        //update the parent component's state with the new date formatted as a string using the props.onChange method\n        return props.onChange(formatDate(newDate));\n\n    }\n\n    /**\n     * @method stepDateBackward1Month steps 'props.date' backward by one month\n     * @returns the props.onChange method with the new date formatted as a string\n     */\n\n    const stepDateBackward1Month = () => {\n\n        //create a new date reference from parent component's state\n        const date = new Date(props.date);\n        //create a date reference for the new date\n        const newDate = new Date(date.setMonth(date.getMonth() - 1));\n        //update the parent component's state with the new date formatted as a string using the 'props.onChange' method\n        return props.onChange(formatDate(newDate));\n\n    }\n\n    /**\n     * @method stepDateForward1Year steps 'props.date' forward one year\n     * @returns the 'props.onChange' method with the new date formatted as a string\n     */\n\n    const stepDateForward1Year = () => {\n\n        //create a new date reference from parent component's state\n        const date = new Date(props.date);\n        //create a date reference for the new date\n        const newDate = new Date(date.setFullYear(date.getFullYear() + 1));\n        //update the parent component's state with the new date formatted as a string using the props.onChange method\n        return props.onChange(formatDate(newDate));\n\n    }\n\n    /**\n     * @method stepDateBackward1Year steps 'props.date' backward one year\n     * @returns the 'props.onChange' method with the new date formatted as a string\n     */\n\n    const stepDateBackward1Year = () => {\n\n        //create a new date reference from parent component's state\n        const date = new Date(props.date);\n        //create a date reference for the new date\n        const newDate = new Date(date.setFullYear(date.getFullYear() - 1));\n        //update the parent component's state with the new date formatted as a string using the props.onChange method\n        return props.onChange(formatDate(newDate));\n\n    }\n\n    /**\n     * @method toggleCalendar toggles the calendar's display status between true and false\n     * @returns the 'setDisplayCalendar' with the new boolean value\n     */\n\n    const toggleCalendar = () => {\n\n        //if the calendar is not displayed\n        if (displayCalendar === false) {\n            //change the calendar's display state to true\n            return setDisplayCalendar(true);\n        }\n\n        //change the calendar's display state to false\n        return setDisplayCalendar(false);\n\n    }\n\n    /**\n     * @method selectDateFromCalendar\n     * @param {object} e - javascript click event created when a date is selected [clicked] from the calendar element with the mouse\n     * @returns the props.onChange method with the new date formatted as a string\n     */\n\n    const selectDateFromCalendar = e => {\n\n        //create a new date reference from parent component's state\n        const date = new Date(e.target.getAttribute(\"data\"));\n        //close the calendar\n        toggleCalendar()\n        //update the parent component's state with the new date formatted as a string using the 'props.onChange' method\n        return props.onChange(formatDate(date));\n\n    }\n\n    /**\n     * @method handleChange\n     * @param {object} e - javascript click event created when a date is selected [clicked] from the calendar element with the mouse\n     * @returns the 'props.onChange' method with the new date formatted as a string\n     */\n\n    const handleChange = e => props.onChange(e.target.value)\n\n    /**\n     * @method getDays\n     * this method builds an array containing date objects to be rendered within\n     * an calendar HTML element-- in order to create a calendar that aligns with a \n     * 7-day grid format \n     * \n     * ex:(S-M-T-W-T-F-S) a certain number or days from both the \n     * preceeding and succeeding months must be gathered and added to the \n     * beggining and end of the array respectively\n     * @returns the setDays method with a new array of days\n     */\n    const getDays = () => {\n\n        //format props provided date as a new date object\n        const currentDate = new Date(props.date);\n        //the month of the current props.date\n        const month = currentDate.getMonth();\n        //the year of the current props.date\n        const year = currentDate.getFullYear();\n        //the number of days in the current month\n        const numberOfDays = new Date(year, month + 1, 0).getDate();\n        //placeholder array that will be used to update state\n        const updatedDays = [];\n\n        //for each day in the current month\n        for (let i = 0; i < numberOfDays; i++) {\n\n            //referenvce to the current day in this i-level loop\n            const day = new Date(year, month, i + 1);\n\n            //if this is the first iteration some days from the preceeding month should be gathered\n            if (i === 0) {\n\n                //to fill out the calendar component a few days \n                //from the preceeding month must be added to the \n                //days array, in this case the built-in getDays method\n                //will yield the proper number of days\n                for (var j = 0; j < day.getDay(); j++) {\n\n                    //create a new date object and add each day to the updatedDays Array for each preceeding day\n                    updatedDays.push(new Date(year, month, i - (day.getDay() - (j + 1))));\n\n                }\n\n            }\n\n            //add the current day to the updatedDays array\n            updatedDays.push(day);\n\n        }\n\n        //to fill out the calendar component a few days from the\n        //succeeding month must be added to the days array\n        //since the calendar is based on a 7 day week the modulus\n        //of 7 is used to determine the number of remiaing days\n        for (let i = 0; i < updatedDays.length % 7; i++) {\n\n            //create a new date object and add each day to the updatedDays Array for each succeeding day\n            updatedDays.push(new Date(year, month + 1, i + 1));\n\n        }\n\n        //update the day state variable\n        return setDays(updatedDays)\n\n    }\n\n    //everytime props.date changes run the getDays method\n    useEffect(() => { getDays() }, [props.date])\n\n    /**\n     * MAIN RETURN STATEMENT\n     * this is the terminal return statement for the DatePicker componenet\n     * all the HTML is contained with in this statement\n     * this statement returns the datepicker element to be rendered\n     */\n\n    return (\n        <div className='datePicker'>\n\n            {\n                //below is the HTML for the date selection control\n                //the controls are composed of two pairs of buttons\n                //one pair to step the date forward or backward by \n                //one day or one year. between these two pairs of \n                //buttons is a text input that allows for direct \n                //manipulation of the date\n            }\n            <div className='daySelector'>\n\n                {/* <button className='leftBtn2' onClick={stepDateBackward1Year}><img src={leftDblArrow} alt='icon of a double left arrow' /></button> */}\n\n                <button className='leftBtn' onClick={stepDateBackward1Day}><img src={leftArrow} alt='icon of a left arrow' /></button>\n\n                <input type={'text'}\n                    aria-label={'date'}\n                    value={props.date}\n                    placeholder={'yyyy/mm/dd'}\n                    onChange={handleChange}\n                    onClick={toggleCalendar}\n                />\n\n                <button className='rightBtn' onClick={stepDateForward1Day}>{<img src={rightArrow} alt='icon of a right arrow' />}</button>\n                \n                {/* <button className='rightBtn2' onClick={stepDateForward1Year}><img src={rightDblArrow} alt='icon of a boudle right arrow' /></button> */}\n\n            </div>\n\n            {displayCalendar ?\n                //if display calender is true render the following HTML element\n                (\n                    <div className='calendar'>\n\n                        {\n                            //below is the HTML for the month selection controls\n                            //the controls are composed of two buttons that are \n                            //used to step the date backwards and forwards by \n                            //one month. between the buttons a <span> element\n                            //that evaluates props.date for the month of the \n                            //date stored and renders that month as the title \n                            //using the monthNames array\n                        }\n                        <div className='monthSelector'>\n\n                            {/* <button className='leftBtn2' onClick={stepDateBackward1Year}><img src={leftDblArrow} alt='icon of a double left arrow' /></button> */}\n                            <button className='leftBtn' onClick={stepDateBackward1Month}><img src={leftArrow} alt='icon of a left arrow' /></button>\n                            \n                            <span>{monthNames()[(new Date(props.date).getMonth())]}</span>\n                            \n                            <button className='rightBtn' onClick={stepDateForward1Month}><img src={rightArrow} alt='icon of a right arrow' /></button>\n                            {/* <button className='rightBtn2' onClick={stepDateForward1Year}><img src={rightDblArrow} alt='icon of a boudle right arrow' /></button> */}\n\n                        </div>\n\n                        <div className='month'>\n\n                            {\n                                //the following script iterates through the dayNames array\n                                //for each day it returns an HTML element that creates\n                                //the header columns for each day of the week\n                                //resulting in the conventional calendar view\n                            }\n                            {dayNames().map((day,i)=>{\n                                console.log(day);\n                                return(<div key={i} className='dayTitle'>{day[0].toUpperCase()}</div>)\n                            })}\n\n                            {//iterate through the days array and render each day in the\n                                days.map((day, i) => {\n\n                                    //create a new date object for the selected day\n                                    const selectedDay = new Date(props.date);\n\n                                    //if the current day in the loop is equal to the selected date stored in props.date\n                                    if (formatDate(day) === formatDate(selectedDay)) {\n\n                                        //return an HTML element with all the day's information\n                                        //with the class 'selectedDay' to change it background \n                                        //color and denote that this is the currently selected date\n                                        return (<div key={i} className='selectedDay day' data={day} onClick={selectDateFromCalendar}>{day.getDate()}</div>)\n\n                                    }\n\n                                    //return an HTML element with all the day's information\n                                    return (<div key={i} className='day' data={day} onClick={selectDateFromCalendar}>{day.getDate()}</div>)\n\n                                })}\n\n                        </div>\n\n                    </div>\n                    //if displayCalendar is false return null and do not render an additional HTML related to the calendar\n                ) : (\n                    null\n                )}\n\n\n        </div>\n\n    );\n\n}\n\n//ES6 export statement\nexport default DatePicker;","import React, { useEffect, useState } from 'react';\nimport DatePicker from './DatePicker.js';\nimport DateRanger from './DateRanger.js';\n\n/**\n * The main purpose of this form is to showcase a potential use case for the react date picker\n */\n\n\nconst Form = () => {\n\n    const formatDate = inputDate => {\n\n        const date = new Date(inputDate);\n        return `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`;\n\n    }\n\n    const [startDate, setStartDate] = useState(formatDate(Date.now()));\n    const [endDate, setEndDate] = useState(formatDate(Date.now()));\n    const [startDate2, setStartDate2] = useState(formatDate(Date.now()));\n    const [endDate2, setEndDate2] = useState(formatDate(Date.now()));\n    const [displayModal, setDisplayModal] = useState(false);\n    const [displayDateErrorModal, setDisplayDateErrorModal] = useState(false);\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n\n    //DATE MODAL CODE\n\n    const dateErrorModal = () => {\n        return (\n            <div>\n                <div className='modal'>\n                    <div className='modal-content'>\n                        <div className='modal-header title'>Form Data</div>\n                        <div className='modal-body'>\n                            End Date Cannot Be Before Start Date\n                    </div>\n                        <div className='modal-footer'>\n                            <button className='btn' onClick={toggleDateErorModal}>Ok</button>\n                        </div>\n                    </div>\n\n                </div>\n                <div className='modal-bg' onClick={toggleDateErorModal}></div>\n            </div>\n        );\n    }\n\n    //MODAL CODE\n\n    const modal = () => {\n        return (\n            <div>\n                <div className='modal'>\n                    <div className='modal-content'>\n                        <div className='modal-header title'>Form Data</div>\n                        <div className='modal-body'>\n                            <div>Name: {name}</div>\n                            <div>Email: {email}</div>\n                            <div>Start Date: {startDate}</div>\n                            <div>End Date: {endDate}</div>\n                        </div>\n                        <div className='modal-footer'>\n                            <button className='btn' onClick={toggleModal}>Ok</button>\n                        </div>\n                    </div>\n\n                </div>\n                <div className='modal-bg' onClick={toggleModal}></div>\n            </div>\n        );\n    }\n\n    const toggleDateErorModal = () => {\n\n        if (displayDateErrorModal === false) {\n            return setDisplayDateErrorModal(true);\n        }\n\n        return setDisplayDateErrorModal(false);\n\n    }\n\n    const toggleModal = () => {\n\n        if (displayModal === false) {\n            return setDisplayModal(true);\n        }\n\n        return setDisplayModal(false);\n\n    }\n\n\n    return (\n        <div className='form'>\n            <div className='form-field'>\n                <div className='title'>Name</div>\n                <input className='name' aria-label='name' type='text' value={name} onChange={e => { setName(e.target.value) }} />\n            </div>\n            <div className='form-field'>\n                <div className='title'>Email</div>\n                <input className='email' aria-label='email' type='email' value={email} onChange={e => { setEmail(e.target.value) }} />\n            </div>\n\n            <div className='form-field'>\n                <div className='startDate'>\n                    <div className='title'>Start Date</div>\n                    <DatePicker date={startDate} onChange={setStartDate} />\n                </div>\n            </div>\n\n            <div className='form-field'>\n                <div className='endDate'>\n                    <div className='title'>End Date</div>\n                    <DatePicker date={endDate} onChange={setEndDate} />\n                </div>\n            </div>\n\n            {/* <div className='form-field'>\n                <div className='dateRange'>\n                    <div className='title'>Date Range</div>\n                    <DateRanger\n                        endDate={endDate2}\n                        startDate={startDate2}\n                        onEndDate2Change={setEndDate2}\n                        onStartDate2Change={setStartDate2} />\n                </div>\n            </div> */}\n\n            <div className='form-field'>\n                <button className='btn' onClick={toggleModal}>Submit</button>\n            </div>\n            {displayModal === true ? modal() : null}\n            {displayDateErrorModal === true ? dateErrorModal() : null}\n        </div>\n\n    );\n};\n\nexport default Form;","import React from 'react';\nimport Form from './components/Form.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}