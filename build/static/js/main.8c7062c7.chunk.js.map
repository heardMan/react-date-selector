{"version":3,"sources":["icons/arrow_forward_ios-white-18dp-2.svg","icons/arrow_back_ios-white-18dp-2.svg","icons/double_arrow_forward_ios-white-18dp.svg","icons/double_arrow_back_ios-white-18dp.svg","components/DatePicker2.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DatePicker","props","_useState","useState","_useState2","Object","slicedToArray","displayCalendar","setDisplayCalendar","_useState3","_useState4","calendarMode","setCalendarMode","_useState5","_useState6","days","setDays","formatDate","date","day","getDate","month","getMonth","year","getFullYear","concat","stepDateForward1Month","Date","newDate","setMonth","onChange","stepDateBackward1Month","stepDateForward1Year","setFullYear","stepDateBackward1Year","updateMonth","selectedMonth","newMonth","indexOf","toggleCalendar","selectDateFromCalendar","e","target","getAttribute","useEffect","currentDate","numberOfDays","updatedDays","i","j","getDay","push","length","getDays","react_default","a","createElement","className","onClick","setDate","src","leftArrow","alt","type","aria-label","value","placeholder","autocomplete","data-form-type","rightArrow","Fragment","id","map","console","log","key","toUpperCase","selectedDay","data","Form","inputDate","now","startDate","setStartDate","endDate","setEndDate","_useState7","_useState8","_useState9","_useState10","displayModal","setDisplayModal","_useState11","_useState12","displayDateErrorModal","setDisplayDateErrorModal","_useState13","_useState14","name","setName","_useState15","_useState16","email","setEmail","toggleDateErorModal","toggleModal","DatePicker2","App","components_Form","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8c7062c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow_forward_ios-white-18dp-2.2f97d706.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow_back_ios-white-18dp-2.ac543f0d.svg\";","module.exports = __webpack_public_path__ + \"static/media/double_arrow_forward_ios-white-18dp.d023c646.svg\";","module.exports = __webpack_public_path__ + \"static/media/double_arrow_back_ios-white-18dp.1f4f4a42.svg\";","/**\n * @name DatePicker\n * @author Mark Heard\n * @version 2.0\n * @copyright 2020 - 2021\n * @requires ReactJS - A library maintained by Facebook -- https://reactjs.org/\n * @component A component used to select dates.\n * \n * @param {object} props - Properties and methods that are inherited from the parent component.\n * \n * @property {string} props.date -  Date information inherited from a higher level component.\n * \n * @method props.onChange -  A method that updates the date variable in the parent when it is changed by the DatePicker\n * \n * @returns {<DatePicker date={} onChange={}/ >}  - the JSX datepicker element to be rendered\n */\n\n//Import react library with useEffect and useState hooks.\nimport React, { useEffect, useState } from 'react';\n\n//Import some image files to use for icons.\nimport rightArrow from '../icons/arrow_forward_ios-white-18dp-2.svg';\nimport leftArrow from '../icons/arrow_back_ios-white-18dp-2.svg';\n\n\nconst DatePicker = props => {\n\n    /**\n     * @constant displayCalendar records the state of the calendar's display status\n     * @type {boolean} \n     * @default false\n     */\n\n    /**\n     * @method setDisplayCalendar\n     * @returns the state change handler for the displayCalendar state variable\n     */\n\n    const [displayCalendar, setDisplayCalendar] = useState(false);\n\n\n\n    /**\n     * @constant calendarMode array of date objects to be rendered to the calendar element possible modes are: days and months\n     * @type {string}\n     * @default 'days'\n     */\n\n    /**\n     * @method setCalendarMode\n     * @returns the state change handler for the calendarMode state variable\n     */\n\n    const [calendarMode, setCalendarMode] = useState('days');\n\n    /**\n     * @constant days array of date objects to be rendered to the calendar element\n     * @type {date}\n     * @default date[]\n     */\n\n    /**\n     * @method setDays\n     * @returns state change handling function for the days state variable\n     */\n\n    const [days, setDays] = useState([]);\n\n    /**\n     * @method dayNames a method that returns an array of day names\n     * @returns {string[]} array containing the names of each day for matted as a string\n     * @example monthNames()[new Date().getMonth()] will return the current month\n     */\n\n    const dayNames = () => {\n        return (\n            [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\",\n                \"Saturday\"\n            ]\n        );\n    }\n\n    /**\n     * @method monthNames a method that returns an array of month names\n     * @returns {string[]} array containing the names of each month for matted as a string\n     * @example monthNames()[new Date().getMonth()] will return the current month\n     */\n\n    const monthNames = () => {\n        return (\n            [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n                \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n            ]\n        );\n    }\n\n\n\n\n    /**\n     * @method formatDate method used to centralize date formatting\n     * @returns {string} date formatted as a string\n     */\n\n    const formatDate = date => {\n\n        //get the date of the month of the provided date\n        const day = date.getDate();\n        //get the month of the provided date\n        //since months are start their index at zero 1 is added\n        // to make it align with the more common month numbering system starting at 1\n        const month = date.getMonth() + 1;\n        //get the year the provided date\n        const year = date.getFullYear();\n\n        //return the date formatted as a sting\n        return `${year}/${month}/${day}`;\n    };\n\n    /**\n     * @method stepDateForward1Day steps props.date forward by one day\n     * @returns props.onChange method with the new date formatted as a string\n     */\n\n    const stepDateForward1Day = () => {\n\n        //create a new date reference from parent component's state\n        const date = new Date(props.date);\n        //create a date reference for the new date\n        const newDate = new Date(date.setDate(date.getDate() + 1));\n        //update the parent component's state with the new date formatted as a string using the props.onChange method\n        return props.onChange(formatDate(newDate));\n\n    }\n\n    /**\n     * @method stepDateBackward1Day steps props.date backward by one day\n     * @returns the props.onChange method with the new date formatted as a string\n     */\n\n    const stepDateBackward1Day = () => {\n\n        //create a new date reference from parent component's state\n        const date = new Date(props.date);\n        //create a date reference for the new date\n        const newDate = new Date(date.setDate(date.getDate() - 1));\n        //update the parent component's state with the new date formatted as a string using the props.onChange method\n        return props.onChange(formatDate(newDate));\n\n    }\n\n    /**\n     * @method stepDateForward1Month steps props.date forward by one month\n     * @returns the props.onChange method with the new date formatted as a string\n     */\n\n    const stepDateForward1Month = () => {\n\n        //create a new date reference from parent component's state\n        const date = new Date(props.date);\n        //create a date reference for the new date\n        const newDate = new Date(date.setMonth(date.getMonth() + 1));\n        //update the parent component's state with the new date formatted as a string using the props.onChange method\n        return props.onChange(formatDate(newDate));\n\n    }\n\n    /**\n     * @method stepDateBackward1Month steps 'props.date' backward by one month\n     * @returns the props.onChange method with the new date formatted as a string\n     */\n\n    const stepDateBackward1Month = () => {\n\n        //create a new date reference from parent component's state\n        const date = new Date(props.date);\n        //create a date reference for the new date\n        const newDate = new Date(date.setMonth(date.getMonth() - 1));\n        //update the parent component's state with the new date formatted as a string using the 'props.onChange' method\n        return props.onChange(formatDate(newDate));\n\n    }\n\n    /**\n     * @method stepDateForward1Year steps 'props.date' forward one year\n     * @returns the 'props.onChange' method with the new date formatted as a string\n     */\n\n    const stepDateForward1Year = () => {\n\n        //create a new date reference from parent component's state\n        const date = new Date(props.date);\n        //create a date reference for the new date\n        const newDate = new Date(date.setFullYear(date.getFullYear() + 1));\n        //update the parent component's state with the new date formatted as a string using the props.onChange method\n        return props.onChange(formatDate(newDate));\n\n    }\n\n    /**\n     * @method stepDateBackward1Year steps 'props.date' backward one year\n     * @returns the 'props.onChange' method with the new date formatted as a string\n     */\n\n    const stepDateBackward1Year = () => {\n\n        //create a new date reference from parent component's state\n        const date = new Date(props.date);\n        //create a date reference for the new date\n        const newDate = new Date(date.setFullYear(date.getFullYear() - 1));\n        //update the parent component's state with the new date formatted as a string using the props.onChange method\n        return props.onChange(formatDate(newDate));\n\n    }\n\n    /**\n     * @method updateMonth - accpets a selected month as a string then updates props.date with a new date that has the selected month\n     * @param {string} selectedMonth - month name are supplied by the monthNames method \n     * @returns {method} - props.change is invoked and supplied with a consistently formatted date\n     */\n\n    const updateMonth = selectedMonth => {\n\n        //create a new date reference from parent component's state\n        const newDate = new Date(props.date)\n        //convert selected month to an ordinal number\n        const newMonth = monthNames().indexOf(selectedMonth)\n        //change the month on the new date\n        newDate.setMonth(newMonth)\n        //change the calendar mode\n        setCalendarMode('days')\n        //update the parent component's state with the new date formatted as a string using the props.onChange method\n        return props.onChange(formatDate(newDate));\n    }\n\n    /**\n     * @method updateYear - accpets a selected month as a string then updates props.date with a new date that has the selected month\n     * @param {string} selectedMonth - month name are supplied by the monthNames method \n     * @returns {method} - props.change is invoked and supplied with a consistently formatted date\n     */\n\n     const updateYear = selectedYear => {\n\n        //create a new date reference from parent component's state\n        const newDate = new Date(props.date)\n        //change the month on the new date\n        newDate.setFullYear(selectedYear)\n        //update the parent component's state with the new date formatted as a string using the props.onChange method\n        return props.onChange(formatDate(newDate));\n\n    }\n\n\n\n    /**\n     * @method toggleCalendar toggles the calendar's display status between true and false\n     * @returns the 'setDisplayCalendar' with the new boolean value\n     */\n\n    const toggleCalendar = () => {\n\n        //if the calendar is not displayed\n        if (displayCalendar === false) {\n            //change the calendar's display state to true\n            return setDisplayCalendar(true);\n        }\n\n        //change the calendar's display state to false\n        return setDisplayCalendar(false);\n\n    }\n\n    /**\n     * @method modeRenderer renders the calendar's mode based on the value of calendarMode\n     * @returns evaluates 'calendarMode' from state and returns the relevant component\n     */\n\n    const modeRenderer = () => {\n        if (calendarMode === 'days') {\n            return (\n                <>\n                    <div className='monthSelector' >\n\n                        <button className='leftBtn' onClick={stepDateBackward1Month}><img src={leftArrow} alt='icon of a left arrow' /></button>\n\n                        <span\n                            id='monthName'\n                            onClick={() => { setCalendarMode('months') }}\n                        >\n                            {monthNames()[(new Date(props.date).getMonth())]}\n                        </span>\n\n                        <button className='rightBtn' onClick={stepDateForward1Month}><img src={rightArrow} alt='icon of a right arrow' /></button>\n\n                    </div>\n\n                    <div className='month'>\n\n                        {\n                            //the following script iterates through the dayNames array\n                            //for each day it returns an HTML element that creates\n                            //the header columns for each day of the week\n                            //resulting in the conventional calendar view\n                        }\n\n                        {dayNames().map((day, i) => {\n                            console.log(day);\n                            return (<div key={i} className='dayTitle'>{day[0].toUpperCase()}</div>)\n                        })}\n\n                        {//iterate through the days array and render each day in the calendar\n                            days.map((day, i) => {\n\n                                //create a new date object for the selected day\n                                const selectedDay = new Date(props.date);\n\n                                //if the current day in the loop is equal to the selected date stored in props.date\n                                if (formatDate(day) === formatDate(selectedDay)) {\n\n                                    //return an HTML element with all the day's information\n                                    //with the class 'selectedDay' to change it background \n                                    //color and denote that this is the currently selected date\n                                    return (<div key={i} className='selectedDay day' data={day} onClick={selectDateFromCalendar}>{day.getDate()}</div>)\n\n                                }\n\n                                //return an HTML element with all the day's information\n                                return (<div key={i} className='day' data={day} onClick={selectDateFromCalendar}>{day.getDate()}</div>)\n\n                            })}\n\n                    </div>\n                </>\n            )\n        } else if (calendarMode === 'months') {\n            return (\n                <>\n                    <div className='yearSelector' >\n\n                        <button className='leftBtn' onClick={stepDateBackward1Year}><img src={leftArrow} alt='icon of a left arrow' /></button>\n\n                        <span id='selectedYear'>\n\n                            {[(new Date(props.date).getFullYear())]}\n\n                            {/* <input type={'number'}\n\n                                aria-label={'date'}\n                                value={[(new Date(props.date).getFullYear())]}\n                                placeholder={[(new Date(props.date).getFullYear())]}\n                                onChange={e=>{updateYear(e.target.value)}}\n                                autocomplete=\"off\"\n                                data-form-type=\"other\"\n                            /> */}\n\n                        </span>\n\n                        <button className='rightBtn' onClick={stepDateForward1Year}><img src={rightArrow} alt='icon of a right arrow' /></button>\n\n                    </div>\n\n                    <div className='months'>\n\n                        {\n                            //the following script iterates through the monthNames array\n                            //for each month it returns an HTML element that creates\n                            //the header columns for each day of the week\n                        }\n\n                        {//iterate through the months names array and render each month in the calendar\n                            monthNames().map((month, i) => {\n\n                                //create a new date object for the selected day\n                                const selectedDay = new Date(props.date);\n                                //get the index of the month in the monthNames array\n                                const selectedMonth = monthNames()[selectedDay.getMonth()];\n\n                                //if the current day in the loop is equal to the selected date stored in props.date\n                                if ((month) === (selectedMonth)) {\n\n                                    //return an HTML element with all the month's information\n                                    //with the class 'selectedMonth' to change it background \n                                    //color and denote that this is the currently selected date\n                                    return (<div key={i} className='selectedMonth monthTile' data={month} onClick={() => { updateMonth(month) }}>{selectedMonth}</div>)\n\n                                }\n\n                                //return an HTML element with all the month's information\n                                return (<div key={i} className='monthTile' data={month} onClick={() => { updateMonth(month) }}>{month}</div>)\n\n                            })}\n\n                    </div>\n                </>\n            )\n        }\n    }\n\n    /**\n     * @method selectDateFromCalendar\n     * @param {object} e - javascript click event created when a date is selected [clicked] from the calendar element with the mouse\n     * @returns the props.onChange method with the new date formatted as a string\n     */\n\n    const selectDateFromCalendar = e => {\n\n        //create a new date reference from parent component's state\n        const date = new Date(e.target.getAttribute(\"data\"));\n        //close the calendar\n        toggleCalendar()\n        //update the parent component's state with the new date formatted as a string using the 'props.onChange' method\n        return props.onChange(formatDate(date));\n\n    }\n\n    /**\n     * @method handleChange\n     * @param {object} e - javascript click event created when a date is selected [clicked] from the calendar element with the mouse\n     * @returns the 'props.onChange' method with the new date formatted as a string\n     */\n\n    const handleChange = e => props.onChange(e.target.value)\n\n    /**\n     * @method getDays\n     * this method builds an array containing date objects to be rendered within\n     * an calendar HTML element-- in order to create a calendar that aligns with a \n     * 7-day grid format \n     * \n     * ex:(S-M-T-W-T-F-S) a certain number or days from both the \n     * preceeding and succeeding months must be gathered and added to the \n     * beggining and end of the array respectively\n     * @returns the setDays method with a new array of days\n     */\n    const getDays = () => {\n\n        //format props provided date as a new date object\n        const currentDate = new Date(props.date);\n        //the month of the current props.date\n        const month = currentDate.getMonth();\n        //the year of the current props.date\n        const year = currentDate.getFullYear();\n        //the number of days in the current month\n        const numberOfDays = new Date(year, month + 1, 0).getDate();\n        //placeholder array that will be used to update state\n        const updatedDays = [];\n\n        //for each day in the current month\n        for (let i = 0; i < numberOfDays; i++) {\n\n            //referenvce to the current day in this i-level loop\n            const day = new Date(year, month, i + 1);\n\n            //if this is the first iteration some days from the preceeding month should be gathered\n            if (i === 0) {\n\n                //to fill out the calendar component a few days \n                //from the preceeding month must be added to the \n                //days array, in this case the built-in getDays method\n                //will yield the proper number of days\n                for (var j = 0; j < day.getDay(); j++) {\n\n                    //create a new date object and add each day to the updatedDays Array for each preceeding day\n                    updatedDays.push(new Date(year, month, i - (day.getDay() - (j + 1))));\n\n                }\n\n            }\n\n            //add the current day to the updatedDays array\n            updatedDays.push(day);\n\n        }\n\n        //to fill out the calendar component a few days from the\n        //succeeding month must be added to the days array\n        //since the calendar is based on a 7 day week the modulus\n        //of 7 is used to determine the number of remiaing days\n        for (let i = 0; i < updatedDays.length % 7; i++) {\n\n            //create a new date object and add each day to the updatedDays Array for each succeeding day\n            updatedDays.push(new Date(year, month + 1, i + 1));\n\n        }\n\n        //update the day state variable\n        return setDays(updatedDays)\n\n    }\n\n    //everytime props.date changes run the getDays method\n    useEffect(() => { getDays() }, [props.date])\n\n    /**\n     * MAIN RETURN STATEMENT\n     * this is the terminal return statement for the DatePicker componenet\n     * all the HTML is contained with in this statement\n     * this statement returns the datepicker element to be rendered\n     */\n\n    return (\n        <div className='datePicker'>\n\n            {\n                //below is the HTML for the date selection control\n                //the controls are composed of two pairs of buttons\n                //one pair to step the date forward or backward by \n                //one day or one year. between these two pairs of \n                //buttons is a text input that allows for direct \n                //manipulation of the date\n            }\n            <div className='daySelector'>\n\n                {/* <button className='leftBtn2' onClick={stepDateBackward1Year}><img src={leftDblArrow} alt='icon of a double left arrow' /></button> */}\n\n                <button className='leftBtn' onClick={stepDateBackward1Day}><img src={leftArrow} alt='icon of a left arrow' /></button>\n\n                <input type={'text'}\n                    aria-label={'date'}\n                    value={props.date}\n                    placeholder={'yyyy/mm/dd'}\n                    onChange={handleChange}\n                    onClick={toggleCalendar}\n                    autocomplete=\"off\"\n                    data-form-type=\"other\"\n                />\n\n                <button className='rightBtn' onClick={stepDateForward1Day}>{<img src={rightArrow} alt='icon of a right arrow' />}</button>\n\n                {/* <button className='rightBtn2' onClick={stepDateForward1Year}><img src={rightDblArrow} alt='icon of a boudle right arrow' /></button> */}\n\n            </div>\n\n            {displayCalendar ?\n                //if display calender is true render the following HTML element\n                (\n                    <div className='calendar'>\n\n                        {\n                            //below is the HTML for the month selection controls\n                            //the controls are composed of two buttons that are \n                            //used to step the date backwards and forwards by \n                            //one month. between the buttons a <span> element\n                            //that evaluates props.date for the month of the \n                            //date stored and renders that month as the title \n                            //using the monthNames array\n                        }\n                        {modeRenderer()}\n\n\n                    </div>\n                    //if displayCalendar is false return null and do not render an additional HTML related to the calendar\n                ) : (\n                    null\n                )}\n\n\n        </div>\n\n    );\n\n}\n\n//ES6 export statement\nexport default DatePicker;","import React, { useEffect, useState } from 'react';\nimport DatePicker from './DatePicker.js';\nimport DatePicker2 from './DatePicker2';\nimport DateRanger from './DateRanger.js';\n\n/**\n * The main purpose of this form is to showcase a potential use case for the react date picker\n */\n\n\nconst Form = () => {\n\n    const formatDate = inputDate => {\n\n        const date = new Date(inputDate);\n        return `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`;\n\n    }\n\n    const [startDate, setStartDate] = useState(formatDate(Date.now()));\n    const [endDate, setEndDate] = useState(formatDate(Date.now()));\n    const [startDate2, setStartDate2] = useState(formatDate(Date.now()));\n    const [endDate2, setEndDate2] = useState(formatDate(Date.now()));\n    const [displayModal, setDisplayModal] = useState(false);\n    const [displayDateErrorModal, setDisplayDateErrorModal] = useState(false);\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n\n    //DATE MODAL CODE\n\n    const dateErrorModal = () => {\n        return (\n            <div>\n                <div className='modal'>\n                    <div className='modal-content'>\n                        <div className='modal-header title'>Form Data</div>\n                        <div className='modal-body'>\n                            End Date Cannot Be Before Start Date\n                    </div>\n                        <div className='modal-footer'>\n                            <button className='btn' onClick={toggleDateErorModal}>Ok</button>\n                        </div>\n                    </div>\n\n                </div>\n                <div className='modal-bg' onClick={toggleDateErorModal}></div>\n            </div>\n        );\n    }\n\n    //MODAL CODE\n\n    const modal = () => {\n        return (\n            <div>\n                <div className='modal'>\n                    <div className='modal-content'>\n                        <div className='modal-header title'>Form Data</div>\n                        <div className='modal-body'>\n                            <div>Name: {name}</div>\n                            <div>Email: {email}</div>\n                            <div>Start Date: {startDate}</div>\n                            <div>End Date: {endDate}</div>\n                        </div>\n                        <div className='modal-footer'>\n                            <button className='btn' onClick={toggleModal}>Ok</button>\n                        </div>\n                    </div>\n\n                </div>\n                <div className='modal-bg' onClick={toggleModal}></div>\n            </div>\n        );\n    }\n\n    const toggleDateErorModal = () => {\n\n        if (displayDateErrorModal === false) {\n            return setDisplayDateErrorModal(true);\n        }\n\n        return setDisplayDateErrorModal(false);\n\n    }\n\n    const toggleModal = () => {\n\n        if (displayModal === false) {\n            return setDisplayModal(true);\n        }\n\n        return setDisplayModal(false);\n\n    }\n\n\n    return (\n        <div className='form'>\n            <div className='form-field'>\n                <div className='title'>Name</div>\n                <input className='name' aria-label='name' type='text' value={name} onChange={e => { setName(e.target.value) }} />\n            </div>\n            <div className='form-field'>\n                <div className='title'>Email</div>\n                <input className='email' aria-label='email' type='email' value={email} onChange={e => { setEmail(e.target.value) }} />\n            </div>\n\n            <div className='form-field'>\n                <div className='startDate'>\n                    <div className='title'>Start Date</div>\n                    <DatePicker2 date={startDate} onChange={setStartDate} />\n                </div>\n            </div>\n\n            <div className='form-field'>\n                <div className='endDate'>\n                    <div className='title'>End Date</div>\n                    <DatePicker2 date={endDate} onChange={setEndDate} />\n                </div>\n            </div>\n\n            {/* <div className='form-field'>\n                <div className='dateRange'>\n                    <div className='title'>Date Range</div>\n                    <DateRanger\n                        endDate={endDate2}\n                        startDate={startDate2}\n                        onEndDate2Change={setEndDate2}\n                        onStartDate2Change={setStartDate2} />\n                </div>\n            </div> */}\n\n            <div className='form-field'>\n                <button className='btn' onClick={toggleModal}>Submit</button>\n            </div>\n            {displayModal === true ? modal() : null}\n            {displayDateErrorModal === true ? dateErrorModal() : null}\n        </div>\n\n    );\n};\n\nexport default Form;","import React from 'react';\nimport Form from './components/Form.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}