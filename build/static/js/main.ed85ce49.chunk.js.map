{"version":3,"sources":["utility/date.js","components/DatePicker.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["date","formatDay","rawDay","day","formatMonth","rawMonth","month","DatePicker","props","useState","displayCalendar","setDisplayCalendar","stepDateForward1Month","currentDate","Date","nextDate","setMonth","getMonth","onChange","stepDateBackward1Month","selectDateFromCalendar","e","target","getAttribute","className","onClick","setDate","getDate","console","log","year","getFullYear","formattedDate","numberOfDays","days","i","j","getDay","push","length","dateUtil","map","dayStr","selectedDay","key","data","getDays","Form","startDate","setStartDate","endDate","setEndDate","displayModal","setDisplayModal","name","setName","email","setEmail","formatStartDate","rawDate","formatEndDate","toggleModal","useEffect","now","type","value","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ed85ce49.chunk.js","sourcesContent":["const date = {\n    formatDay: function (rawDay) {\n        let day;\n\n        switch (rawDay) {\n            case 0:\n                day = 'Sunday';\n                break;\n            case 1:\n                day = 'Monday';\n                break;\n            case 2:\n                day = 'Tuesday';\n                break;\n            case 3:\n                day = 'Wednesday';\n                break;\n            case 4:\n                day = 'Thursday';\n                break;\n            case 5:\n                day = 'Friday';\n                break;\n            case 6:\n                day = 'Saturday';\n                break;\n            default:\n                day = 'Error: Date Input for formatDay() Not Recognized'\n\n        }\n\n        return day;\n    },\n    formatMonth: function (rawMonth) {\n        let month;\n\n        switch (rawMonth) {\n            case 0:\n                month = 'January';\n                break;\n            case 1:\n                month = 'February';\n                break;\n            case 2:\n                month = 'March';\n                break;\n            case 3:\n                month = 'April';\n                break;\n            case 4:\n                month = 'May';\n                break;\n            case 5:\n                month = 'June';\n                break;\n            case 6:\n                month = 'July';\n                break;\n            case 7:\n                month = 'August';\n                break;\n            case 8:\n                month = 'September';\n                break;\n            case 9:\n                month = 'October';\n                break;\n            case 10:\n                month = 'November';\n                break;\n            case 11:\n                month = 'December';\n                break;\n\n            default:\n                month = 'Error: Date Input for formatMonth() Not Recognized'\n\n        }\n\n        return month;\n    }\n\n}\nexport default date;","import React, { useState } from 'react';\nimport dateUtil from '../utility/date.js';\n\nconst DatePicker = props => {\n\n    const [displayCalendar, setDisplayCalendar] = useState(false);\n\n    const formattedDate = () => {\n        \n        const currentDate = new Date(props.date);\n\n        console.log(currentDate);\n        const day = currentDate.getDate();\n        const month = currentDate.getMonth()+1;\n        const year = currentDate.getFullYear();\n        \n        \n        return `${month}/${day}/${year}`;\n    }\n\n    const stepDateForward1Day = () => {\n\n        const currentDate = new Date(props.date);\n        const nextDate = currentDate.setDate(currentDate.getDate() + 1);\n\n        return props.onChange(nextDate);\n\n    }\n\n    const stepDateBackward1Day = () => {\n\n        const currentDate = new Date(props.date);\n        const nextDate = currentDate.setDate(currentDate.getDate() - 1);\n\n        return props.onChange(nextDate);\n\n    }\n\n    const stepDateForward1Month = () => {\n\n        const currentDate = new Date(props.date);\n        const nextDate = currentDate.setMonth(currentDate.getMonth() + 1);\n\n        return props.onChange(nextDate);\n\n    }\n\n    const stepDateBackward1Month = () => {\n\n        const currentDate = new Date(props.date);\n        const nextDate = currentDate.setMonth(currentDate.getMonth() - 1);\n\n        return props.onChange(nextDate);\n\n    }\n\n    const toggleCalendar = () => {\n\n        if (displayCalendar === false) {\n\n            return setDisplayCalendar(true);\n\n        }\n\n        return setDisplayCalendar(false);\n\n    }\n\n    const selectDateFromCalendar = e => {\n\n        return props.onChange(e.target.getAttribute(\"data\"));\n\n    }\n\n    const getDays = () => {\n\n        const currentDate = new Date(props.date);\n        const month = currentDate.getMonth();\n        const year = currentDate.getFullYear();\n        const numberOfDays = new Date(year, month + 1, 0).getDate();\n        const days = [];\n\n        for (let i = 0; i < numberOfDays; i++) {\n\n            const day = new Date(year, month, i + 1);\n\n            if (i === 0) {\n\n                for (var j = 0; j < day.getDay(); j++) {\n\n                    days.push(new Date(year, month, i - (day.getDay() - (j + 1))));\n\n                }\n\n            }\n\n            days.push(day);\n\n        }\n\n        for (let i = 0; i < days.length % 7; i++) {\n\n            days.push(new Date(year, month + 1, i + 1));\n\n        }\n\n        return (\n\n            <div className='calendar'>\n\n                <div className='monthSelector'>\n                    <button className='leftBtn' onClick={stepDateBackward1Month}>{'<'}</button>\n                    <span>{dateUtil.formatMonth(month)}</span>\n                    <button className='rightBtn' onClick={stepDateForward1Month}>{'>'}</button>\n                </div>\n\n                <div className='month'>\n\n                    <div className='dayTitle'>S</div>\n                    <div className='dayTitle'>M</div>\n                    <div className='dayTitle'>T</div>\n                    <div className='dayTitle'>W</div>\n                    <div className='dayTitle'>T</div>\n                    <div className='dayTitle'>F</div>\n                    <div className='dayTitle'>S</div>\n\n                    {days.map((day, i) => {\n\n                        const dayStr = `${day.getFullYear()}-${day.getMonth()}-${day.getDate()}`;\n\n                        const selectedDay = new Date(props.date);\n\n                        const selectedDayStr = `${selectedDay.getFullYear()}-${selectedDay.getMonth()}-${selectedDay.getDate()}`;\n\n                        if (dayStr === selectedDayStr) {\n\n                            return (<div key={i} className='selectedDay day' data={day} onClick={selectDateFromCalendar}>{day.getDate()}</div>)\n\n                        }\n\n                        return (<div key={i} className='day' data={day} onClick={selectDateFromCalendar}>{day.getDate()}</div>)\n\n                    })}\n\n                </div>\n\n            </div>\n        );\n\n    }\n\n    return (<div className='datePicker'>\n\n        <div className='daySelector'>\n            <button className='leftBtn' onClick={stepDateBackward1Day}>{'<'}</button>\n            <div onClick={toggleCalendar} >{formattedDate()}</div>\n            <button className='rightBtn' onClick={stepDateForward1Day}>{'>'}</button>\n        </div>\n\n        {displayCalendar === true ? getDays() : null}\n\n    </div>\n\n    );\n\n}\n\nexport default DatePicker;","import React, { useEffect, useState } from 'react';\nimport DatePicker from '../components/DatePicker.js';\nimport { buildQueries } from '@testing-library/react';\n\nconst Form = () => {\n    const [startDate, setStartDate] = useState(null);\n    const [endDate, setEndDate] = useState(null);\n    const [displayModal, setDisplayModal] = useState(false);\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n\n    const formatStartDate = (rawDate) => {\n\n        const currentDate = new Date(rawDate);\n        const day = currentDate.getDate();\n        const month = currentDate.getMonth() + 1;\n        const year = currentDate.getFullYear();\n\n        return setStartDate(`${year}/${month}/${day}`);\n\n    }\n\n    const formatEndDate = (rawDate) => {\n\n        const currentDate = new Date(rawDate);\n        const day = currentDate.getDate();\n        const month = currentDate.getMonth() + 1;\n        const year = currentDate.getFullYear();\n\n        return setEndDate(`${year}/${month}/${day}`);\n\n    }\n\n    const modal = () => {\n        return (\n            <div>\n            <div className='modal'>\n                <div className='modal-content'>\n                    <div className='modal-header title'>Form Data</div>\n                    <div className='modal-body'>\n                        <div>Name: {name}</div>\n                        <div>Email: {email}</div>\n                        <div>Start Date: {startDate}</div>\n                        <div>End Date: {endDate}</div>\n                    </div>\n                    <div className='modal-footer'>\n                        <button className='btn' onClick={toggleModal}>Ok</button>\n                    </div>\n                </div>\n                \n            </div>\n            <div className='modal-bg' onClick={toggleModal}></div>\n            </div>\n        );\n    }\n\n    const toggleModal = () => {\n\n        if (displayModal === false) {\n\n            return setDisplayModal(true);\n\n        }\n\n        return setDisplayModal(false);\n\n    }\n\n\n    useEffect(() => {\n\n        formatStartDate((Date.now()));\n        formatEndDate((Date.now()));\n\n    }, [])\n\n    return (\n        <div className='form'>\n            <div className='form-field'>\n                <div className='title'>Name</div>\n                <input className='name' type='text' value={name} onChange={e=>{setName(e.target.value)}}/>\n            </div>\n            <div className='form-field'>\n                <div className='title'>Email</div>\n                <input className='email' type='email' value={email} onChange={e=>{setEmail(e.target.value)}}/>\n            </div>\n            <div className='form-field'>\n                <div className='startDate'>\n                    <div className='title'>Start Date</div>\n                    <DatePicker date={startDate} onChange={formatStartDate} />\n                </div>\n            </div>\n\n            <div className='form-field'>\n                <div className='endDate'>\n                    <div className='title'>End Date</div>\n                    <DatePicker date={endDate} onChange={formatEndDate} />\n                </div>\n            </div>\n            <div className='form-field'>\n                <button className='btn' onClick={toggleModal}>Submit</button>\n            </div>\n            {displayModal === true ? modal() : null}\n        </div>\n    );\n};\n\nexport default Form;","import React from 'react';\nimport Form from './components/Form.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}